<?xml version="1.0"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<!--
		Enable security, let the casAuthenticationEntryPoint handle all
		intercepted urls. The CAS_FILTER needs to be in the right position
		within the filter chain.
	-->


	<security:http entry-point-ref="casAuthenticationEntryPoint"
		auto-config="true">
		<security:intercept-url pattern="/**" access="ROLE_USER"></security:intercept-url>
		<security:custom-filter position="CAS_FILTER"
			ref="casAuthenticationFilter"></security:custom-filter>
	</security:http>

	<!--
		Required for the casProcessingFilter, so define it explicitly set and
		specify an Id Even though the authenticationManager is created by
		default when namespace based config is used.
	-->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="casAuthenticationProvider"></security:authentication-provider>
	</security:authentication-manager>

	<!--
		This section is used to configure CAS. The service is the actual
		redirect that will be triggered after the CAS login sequence.
	-->
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service" value="${otp.service}"></property>
		<property name="sendRenew" value="false"></property>
	</bean>

	<!--
		The CAS filter handles the redirect from the CAS server and starts the
		ticket validation.
	-->
	<bean id="casAuthenticationFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager"></property>
	</bean>

	<!--
		The entryPoint intercepts all the CAS authentication requests. It
		redirects to the CAS loginUrl for the CAS login page.
	-->
	<bean id="casAuthenticationEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="${cas.url}${cas.login.url}"></property>
		<property name="serviceProperties" ref="serviceProperties"></property>
	</bean>

	<!-- 
		Handles the CAS ticket processing.
	 -->
	<bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="userDetailsService" ref="allAuthenticatedUserService"></property>
		<property name="serviceProperties" ref="serviceProperties"></property>
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="${cas.url}">
				</constructor-arg>
			</bean>
		</property>
		<property name="key" value="cas"></property>
	</bean>

	<bean id="allAuthenticatedUserService"
		class="otpd.jersey.spring.services.security.SecurityUserService" />

	<!-- Invoked when the user clicks logout 
	<bean id="logoutFilter" class="org.springframework.security.ui.logout.LogoutFilter">
		<constructor-arg value="${cas.url}/logout" />
		<constructor-arg>
			<list>
				<bean
					class="org.springframework.security.ui.logout.SecurityContextLogoutHandler">
					<property name="invalidateHttpSession" value="true" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	-->
</beans>
